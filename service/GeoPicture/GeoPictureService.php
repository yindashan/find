<?php
namespace GeoPicture;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface GeoPictureServiceIf {
  /**
   * @param int $pn
   * @param int $rn
   * @param \GeoPicture\Bound $bound
   * @return \GeoPicture\TopPicture
   */
  public function getTopPictureInBound($pn, $rn, \GeoPicture\Bound $bound);
  /**
   * @param int $pn
   * @param int $rn
   * @param \GeoPicture\Bound $bound
   * @return \GeoPicture\TopPicture
   */
  public function getNewestPictureInBound($pn, $rn, \GeoPicture\Bound $bound);
  /**
   * @param string $s
   * @return string
   */
  public function myEcho($s);
}

class GeoPictureServiceClient implements \GeoPicture\GeoPictureServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getTopPictureInBound($pn, $rn, \GeoPicture\Bound $bound)
  {
    $this->send_getTopPictureInBound($pn, $rn, $bound);
    return $this->recv_getTopPictureInBound();
  }

  public function send_getTopPictureInBound($pn, $rn, \GeoPicture\Bound $bound)
  {
    $args = new \GeoPicture\GeoPictureService_getTopPictureInBound_args();
    $args->pn = $pn;
    $args->rn = $rn;
    $args->bound = $bound;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTopPictureInBound', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTopPictureInBound', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTopPictureInBound()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GeoPicture\GeoPictureService_getTopPictureInBound_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GeoPicture\GeoPictureService_getTopPictureInBound_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTopPictureInBound failed: unknown result");
  }

  public function getNewestPictureInBound($pn, $rn, \GeoPicture\Bound $bound)
  {
    $this->send_getNewestPictureInBound($pn, $rn, $bound);
    return $this->recv_getNewestPictureInBound();
  }

  public function send_getNewestPictureInBound($pn, $rn, \GeoPicture\Bound $bound)
  {
    $args = new \GeoPicture\GeoPictureService_getNewestPictureInBound_args();
    $args->pn = $pn;
    $args->rn = $rn;
    $args->bound = $bound;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getNewestPictureInBound', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getNewestPictureInBound', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getNewestPictureInBound()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GeoPicture\GeoPictureService_getNewestPictureInBound_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GeoPicture\GeoPictureService_getNewestPictureInBound_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getNewestPictureInBound failed: unknown result");
  }

  public function myEcho($s)
  {
    $this->send_myEcho($s);
    return $this->recv_myEcho();
  }

  public function send_myEcho($s)
  {
    $args = new \GeoPicture\GeoPictureService_myEcho_args();
    $args->s = $s;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'myEcho', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('myEcho', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_myEcho()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GeoPicture\GeoPictureService_myEcho_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GeoPicture\GeoPictureService_myEcho_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("myEcho failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class GeoPictureService_getTopPictureInBound_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $pn = null;
  /**
   * @var int
   */
  public $rn = null;
  /**
   * @var \GeoPicture\Bound
   */
  public $bound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pn',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'rn',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'bound',
          'type' => TType::STRUCT,
          'class' => '\GeoPicture\Bound',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pn'])) {
        $this->pn = $vals['pn'];
      }
      if (isset($vals['rn'])) {
        $this->rn = $vals['rn'];
      }
      if (isset($vals['bound'])) {
        $this->bound = $vals['bound'];
      }
    }
  }

  public function getName() {
    return 'GeoPictureService_getTopPictureInBound_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->bound = new \GeoPicture\Bound();
            $xfer += $this->bound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoPictureService_getTopPictureInBound_args');
    if ($this->pn !== null) {
      $xfer += $output->writeFieldBegin('pn', TType::I32, 1);
      $xfer += $output->writeI32($this->pn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rn !== null) {
      $xfer += $output->writeFieldBegin('rn', TType::I32, 2);
      $xfer += $output->writeI32($this->rn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bound !== null) {
      if (!is_object($this->bound)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bound', TType::STRUCT, 3);
      $xfer += $this->bound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoPictureService_getTopPictureInBound_result {
  static $_TSPEC;

  /**
   * @var \GeoPicture\TopPicture
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\GeoPicture\TopPicture',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'GeoPictureService_getTopPictureInBound_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \GeoPicture\TopPicture();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoPictureService_getTopPictureInBound_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoPictureService_getNewestPictureInBound_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $pn = null;
  /**
   * @var int
   */
  public $rn = null;
  /**
   * @var \GeoPicture\Bound
   */
  public $bound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pn',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'rn',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'bound',
          'type' => TType::STRUCT,
          'class' => '\GeoPicture\Bound',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pn'])) {
        $this->pn = $vals['pn'];
      }
      if (isset($vals['rn'])) {
        $this->rn = $vals['rn'];
      }
      if (isset($vals['bound'])) {
        $this->bound = $vals['bound'];
      }
    }
  }

  public function getName() {
    return 'GeoPictureService_getNewestPictureInBound_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->bound = new \GeoPicture\Bound();
            $xfer += $this->bound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoPictureService_getNewestPictureInBound_args');
    if ($this->pn !== null) {
      $xfer += $output->writeFieldBegin('pn', TType::I32, 1);
      $xfer += $output->writeI32($this->pn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rn !== null) {
      $xfer += $output->writeFieldBegin('rn', TType::I32, 2);
      $xfer += $output->writeI32($this->rn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bound !== null) {
      if (!is_object($this->bound)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bound', TType::STRUCT, 3);
      $xfer += $this->bound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoPictureService_getNewestPictureInBound_result {
  static $_TSPEC;

  /**
   * @var \GeoPicture\TopPicture
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\GeoPicture\TopPicture',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'GeoPictureService_getNewestPictureInBound_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \GeoPicture\TopPicture();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoPictureService_getNewestPictureInBound_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoPictureService_myEcho_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $s = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 's',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['s'])) {
        $this->s = $vals['s'];
      }
    }
  }

  public function getName() {
    return 'GeoPictureService_myEcho_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->s);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoPictureService_myEcho_args');
    if ($this->s !== null) {
      $xfer += $output->writeFieldBegin('s', TType::STRING, 1);
      $xfer += $output->writeString($this->s);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GeoPictureService_myEcho_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'GeoPictureService_myEcho_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeoPictureService_myEcho_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


