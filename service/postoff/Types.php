<?php
namespace postoff;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class EventType {
  const FORWARD = 0;
  const COMMENT = 1;
  const ZAN = 2;
  const ZAN_CANCEL = 3;
  static public $__names = array(
    0 => 'FORWARD',
    1 => 'COMMENT',
    2 => 'ZAN',
    3 => 'ZAN_CANCEL',
  );
}

class PostServiceRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $tid = null;
  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $industry = null;
  /**
   * @var string
   */
  public $title = "";
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $ctime = null;
  /**
   * @var int
   */
  public $parent_tid = -1;
  /**
   * @var int
   */
  public $origin_tid = -1;
  /**
   * @var int
   */
  public $is_essence = 0;
  /**
   * @var string
   */
  public $img = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'industry',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'ctime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'parent_tid',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'origin_tid',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'is_essence',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'img',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['industry'])) {
        $this->industry = $vals['industry'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['ctime'])) {
        $this->ctime = $vals['ctime'];
      }
      if (isset($vals['parent_tid'])) {
        $this->parent_tid = $vals['parent_tid'];
      }
      if (isset($vals['origin_tid'])) {
        $this->origin_tid = $vals['origin_tid'];
      }
      if (isset($vals['is_essence'])) {
        $this->is_essence = $vals['is_essence'];
      }
      if (isset($vals['img'])) {
        $this->img = $vals['img'];
      }
    }
  }

  public function getName() {
    return 'PostServiceRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->industry);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ctime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parent_tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->origin_tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_essence);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->img);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PostServiceRequest');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::I32, 1);
      $xfer += $output->writeI32($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->industry !== null) {
      $xfer += $output->writeFieldBegin('industry', TType::I32, 3);
      $xfer += $output->writeI32($this->industry);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 4);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 5);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ctime !== null) {
      $xfer += $output->writeFieldBegin('ctime', TType::I64, 6);
      $xfer += $output->writeI64($this->ctime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parent_tid !== null) {
      $xfer += $output->writeFieldBegin('parent_tid', TType::I32, 7);
      $xfer += $output->writeI32($this->parent_tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->origin_tid !== null) {
      $xfer += $output->writeFieldBegin('origin_tid', TType::I32, 8);
      $xfer += $output->writeI32($this->origin_tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_essence !== null) {
      $xfer += $output->writeFieldBegin('is_essence', TType::I32, 9);
      $xfer += $output->writeI32($this->is_essence);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->img !== null) {
      $xfer += $output->writeFieldBegin('img', TType::STRING, 10);
      $xfer += $output->writeString($this->img);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PostServiceResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $err_no = null;
  /**
   * @var string
   */
  public $err_msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'err_no',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'err_msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['err_no'])) {
        $this->err_no = $vals['err_no'];
      }
      if (isset($vals['err_msg'])) {
        $this->err_msg = $vals['err_msg'];
      }
    }
  }

  public function getName() {
    return 'PostServiceResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->err_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->err_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PostServiceResponse');
    if ($this->err_no !== null) {
      $xfer += $output->writeFieldBegin('err_no', TType::I32, 1);
      $xfer += $output->writeI32($this->err_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err_msg !== null) {
      $xfer += $output->writeFieldBegin('err_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->err_msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EventServiceRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $tid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'tid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
    }
  }

  public function getName() {
    return 'EventServiceRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EventServiceRequest');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::I32, 2);
      $xfer += $output->writeI32($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EventServiceResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $err_no = null;
  /**
   * @var string
   */
  public $err_msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'err_no',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'err_msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['err_no'])) {
        $this->err_no = $vals['err_no'];
      }
      if (isset($vals['err_msg'])) {
        $this->err_msg = $vals['err_msg'];
      }
    }
  }

  public function getName() {
    return 'EventServiceResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->err_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->err_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EventServiceResponse');
    if ($this->err_no !== null) {
      $xfer += $output->writeFieldBegin('err_no', TType::I32, 1);
      $xfer += $output->writeI32($this->err_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err_msg !== null) {
      $xfer += $output->writeFieldBegin('err_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->err_msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


