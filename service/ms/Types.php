<?php
namespace ms;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * @brief 系统消息类型
 */
final class ActionType {
  const AT = 0;
  const MAIL = 1;
  const COMMENT = 2;
  const COMMENT_REPLY = 3;
  const COMMENT_DELETE = 4;
  const FOLLOW = 5;
  const PRAISE = 6;
  const NEW_TWEET = 7;
  const NEW_FRIEND = 8;
  const MIS_AUTHENTED = 9;
  static public $__names = array(
    0 => 'AT',
    1 => 'MAIL',
    2 => 'COMMENT',
    3 => 'COMMENT_REPLY',
    4 => 'COMMENT_DELETE',
    5 => 'FOLLOW',
    6 => 'PRAISE',
    7 => 'NEW_TWEET',
    8 => 'NEW_FRIEND',
    9 => 'MIS_AUTHENTED',
  );
}

final class TweetType {
  const INDEX = 1;
  const COMMUNITY = 2;
  static public $__names = array(
    1 => 'INDEX',
    2 => 'COMMUNITY',
  );
}

/**
 * @brief 系统动作消息
 */
class SystemMessage {
  static $_TSPEC;

  /**
   * @var int
   */
  public $from_uid = null;
  /**
   * @var int
   */
  public $action_type = null;
  /**
   * @var int[]
   */
  public $to_uid = null;
  /**
   * @var int
   */
  public $content_id = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'action_type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'to_uid',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'content_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['from_uid'])) {
        $this->from_uid = $vals['from_uid'];
      }
      if (isset($vals['action_type'])) {
        $this->action_type = $vals['action_type'];
      }
      if (isset($vals['to_uid'])) {
        $this->to_uid = $vals['to_uid'];
      }
      if (isset($vals['content_id'])) {
        $this->content_id = $vals['content_id'];
      }
    }
  }

  public function getName() {
    return 'SystemMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->from_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->to_uid = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->to_uid []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->content_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SystemMessage');
    if ($this->from_uid !== null) {
      $xfer += $output->writeFieldBegin('from_uid', TType::I32, 1);
      $xfer += $output->writeI32($this->from_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_type !== null) {
      $xfer += $output->writeFieldBegin('action_type', TType::I32, 2);
      $xfer += $output->writeI32($this->action_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to_uid !== null) {
      if (!is_array($this->to_uid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('to_uid', TType::LST, 3);
      {
        $output->writeListBegin(TType::I32, count($this->to_uid));
        {
          foreach ($this->to_uid as $iter6)
          {
            $xfer += $output->writeI32($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content_id !== null) {
      $xfer += $output->writeFieldBegin('content_id', TType::I32, 4);
      $xfer += $output->writeI32($this->content_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewTweetNotifyRequest {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $uids = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $tid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'tid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uids'])) {
        $this->uids = $vals['uids'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
    }
  }

  public function getName() {
    return 'NewTweetNotifyRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->uids = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              $this->uids []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewTweetNotifyRequest');
    if ($this->uids !== null) {
      if (!is_array($this->uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uids', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->uids));
        {
          foreach ($this->uids as $iter13)
          {
            $xfer += $output->writeI32($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::I32, 3);
      $xfer += $output->writeI32($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * @brief mis站外通知
 */
class NoticeRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $industry_id = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $tid = null;
  /**
   * @var string
   */
  public $url = null;
  /**
   * @var int
   */
  public $send_time = null;
  /**
   * @var int
   */
  public $push_task_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'industry_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'tid',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'send_time',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'push_task_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['industry_id'])) {
        $this->industry_id = $vals['industry_id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['send_time'])) {
        $this->send_time = $vals['send_time'];
      }
      if (isset($vals['push_task_id'])) {
        $this->push_task_id = $vals['push_task_id'];
      }
    }
  }

  public function getName() {
    return 'NoticeRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->industry_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->send_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->push_task_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NoticeRequest');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->industry_id !== null) {
      $xfer += $output->writeFieldBegin('industry_id', TType::I32, 3);
      $xfer += $output->writeI32($this->industry_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::I32, 5);
      $xfer += $output->writeI32($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 6);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->send_time !== null) {
      $xfer += $output->writeFieldBegin('send_time', TType::I32, 7);
      $xfer += $output->writeI32($this->send_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->push_task_id !== null) {
      $xfer += $output->writeFieldBegin('push_task_id', TType::I32, 8);
      $xfer += $output->writeI32($this->push_task_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewFriendRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $to_uid = null;
  /**
   * @var int[]
   */
  public $rec_uids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'to_uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'rec_uids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['to_uid'])) {
        $this->to_uid = $vals['to_uid'];
      }
      if (isset($vals['rec_uids'])) {
        $this->rec_uids = $vals['rec_uids'];
      }
    }
  }

  public function getName() {
    return 'NewFriendRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->to_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->rec_uids = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $xfer += $input->readI32($elem19);
              $this->rec_uids []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewFriendRequest');
    if ($this->to_uid !== null) {
      $xfer += $output->writeFieldBegin('to_uid', TType::I32, 1);
      $xfer += $output->writeI32($this->to_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rec_uids !== null) {
      if (!is_array($this->rec_uids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rec_uids', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->rec_uids));
        {
          foreach ($this->rec_uids as $iter20)
          {
            $xfer += $output->writeI32($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


