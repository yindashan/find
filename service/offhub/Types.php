<?php
namespace offhub;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class EventType {
  const FORWARD = 0;
  const COMMENT = 1;
  const ZAN = 2;
  const ZAN_CANCEL = 3;
  static public $__names = array(
    0 => 'FORWARD',
    1 => 'COMMENT',
    2 => 'ZAN',
    3 => 'ZAN_CANCEL',
  );
}

final class SmsType {
  const SECURITY = 0;
  static public $__names = array(
    0 => 'SECURITY',
  );
}

final class SysMsgType {
  const AT = 0;
  const MAIL = 1;
  const COMMENT = 2;
  const COMMENT_REPLY = 3;
  const COMMENT_DELETE = 4;
  const FOLLOW = 5;
  const PRAISE = 6;
  const NEW_TWEET = 7;
  const NEW_FRIEND = 8;
  const MIS_AUTHENTED = 9;
  static public $__names = array(
    0 => 'AT',
    1 => 'MAIL',
    2 => 'COMMENT',
    3 => 'COMMENT_REPLY',
    4 => 'COMMENT_DELETE',
    5 => 'FOLLOW',
    6 => 'PRAISE',
    7 => 'NEW_TWEET',
    8 => 'NEW_FRIEND',
    9 => 'MIS_AUTHENTED',
  );
}

class ResourceStruct {
  static $_TSPEC;

  /**
   * @var int
   */
  public $rid = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var string
   */
  public $img = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'img',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rid'])) {
        $this->rid = $vals['rid'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['img'])) {
        $this->img = $vals['img'];
      }
    }
  }

  public function getName() {
    return 'ResourceStruct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->rid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->img);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ResourceStruct');
    if ($this->rid !== null) {
      $xfer += $output->writeFieldBegin('rid', TType::I64, 1);
      $xfer += $output->writeI64($this->rid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 2);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->img !== null) {
      $xfer += $output->writeFieldBegin('img', TType::STRING, 3);
      $xfer += $output->writeString($this->img);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TweetStruct {
  static $_TSPEC;

  /**
   * @var int
   */
  public $tid = null;
  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var string
   */
  public $title = "";
  /**
   * @var string
   */
  public $content = "";
  /**
   * @var string
   */
  public $tags = "";
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $f_catalog = null;
  /**
   * @var string
   */
  public $s_catalog = null;
  /**
   * @var int
   */
  public $ctime = null;
  /**
   * @var int
   */
  public $dtime = null;
  /**
   * @var string
   */
  public $resource_id = null;
  /**
   * @var \offhub\ResourceStruct[]
   */
  public $resources = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'tags',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'f_catalog',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 's_catalog',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'ctime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'dtime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'resource_id',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'resources',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\offhub\ResourceStruct',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['tags'])) {
        $this->tags = $vals['tags'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['f_catalog'])) {
        $this->f_catalog = $vals['f_catalog'];
      }
      if (isset($vals['s_catalog'])) {
        $this->s_catalog = $vals['s_catalog'];
      }
      if (isset($vals['ctime'])) {
        $this->ctime = $vals['ctime'];
      }
      if (isset($vals['dtime'])) {
        $this->dtime = $vals['dtime'];
      }
      if (isset($vals['resource_id'])) {
        $this->resource_id = $vals['resource_id'];
      }
      if (isset($vals['resources'])) {
        $this->resources = $vals['resources'];
      }
    }
  }

  public function getName() {
    return 'TweetStruct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tags);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->f_catalog);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->s_catalog);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ctime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->resource_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->resources = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \offhub\ResourceStruct();
              $xfer += $elem5->read($input);
              $this->resources []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TweetStruct');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::I64, 1);
      $xfer += $output->writeI64($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 3);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tags !== null) {
      $xfer += $output->writeFieldBegin('tags', TType::STRING, 5);
      $xfer += $output->writeString($this->tags);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 6);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->f_catalog !== null) {
      $xfer += $output->writeFieldBegin('f_catalog', TType::STRING, 7);
      $xfer += $output->writeString($this->f_catalog);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_catalog !== null) {
      $xfer += $output->writeFieldBegin('s_catalog', TType::STRING, 8);
      $xfer += $output->writeString($this->s_catalog);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ctime !== null) {
      $xfer += $output->writeFieldBegin('ctime', TType::I64, 9);
      $xfer += $output->writeI64($this->ctime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dtime !== null) {
      $xfer += $output->writeFieldBegin('dtime', TType::I64, 10);
      $xfer += $output->writeI64($this->dtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resource_id !== null) {
      $xfer += $output->writeFieldBegin('resource_id', TType::STRING, 11);
      $xfer += $output->writeString($this->resource_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resources !== null) {
      if (!is_array($this->resources)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('resources', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRUCT, count($this->resources));
        {
          foreach ($this->resources as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PostServiceRequest {
  static $_TSPEC;

  /**
   * @var \offhub\TweetStruct
   */
  public $tweet_info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tweet_info',
          'type' => TType::STRUCT,
          'class' => '\offhub\TweetStruct',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tweet_info'])) {
        $this->tweet_info = $vals['tweet_info'];
      }
    }
  }

  public function getName() {
    return 'PostServiceRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tweet_info = new \offhub\TweetStruct();
            $xfer += $this->tweet_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PostServiceRequest');
    if ($this->tweet_info !== null) {
      if (!is_object($this->tweet_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tweet_info', TType::STRUCT, 1);
      $xfer += $this->tweet_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EventServiceRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $tid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'tid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
    }
  }

  public function getName() {
    return 'EventServiceRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EventServiceRequest');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::I32, 2);
      $xfer += $output->writeI32($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FollowEvent {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $follower_uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'follower_uid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['follower_uid'])) {
        $this->follower_uid = $vals['follower_uid'];
      }
    }
  }

  public function getName() {
    return 'FollowEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->follower_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FollowEvent');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->follower_uid !== null) {
      $xfer += $output->writeFieldBegin('follower_uid', TType::I32, 2);
      $xfer += $output->writeI32($this->follower_uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SmsRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mobile = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $send_time = 0;
  /**
   * @var int
   */
  public $type =   0;
  /**
   * @var int
   */
  public $sid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'send_time',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'sid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['send_time'])) {
        $this->send_time = $vals['send_time'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
    }
  }

  public function getName() {
    return 'SmsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->send_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SmsRequest');
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 1);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->send_time !== null) {
      $xfer += $output->writeFieldBegin('send_time', TType::I32, 3);
      $xfer += $output->writeI32($this->send_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::I32, 5);
      $xfer += $output->writeI32($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SysMsgRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $from_uid = null;
  /**
   * @var int
   */
  public $action_type = null;
  /**
   * @var int[]
   */
  public $to_uid = null;
  /**
   * @var int
   */
  public $content_id = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'action_type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'to_uid',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'content_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['from_uid'])) {
        $this->from_uid = $vals['from_uid'];
      }
      if (isset($vals['action_type'])) {
        $this->action_type = $vals['action_type'];
      }
      if (isset($vals['to_uid'])) {
        $this->to_uid = $vals['to_uid'];
      }
      if (isset($vals['content_id'])) {
        $this->content_id = $vals['content_id'];
      }
    }
  }

  public function getName() {
    return 'SysMsgRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->from_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->to_uid = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              $this->to_uid []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->content_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SysMsgRequest');
    if ($this->from_uid !== null) {
      $xfer += $output->writeFieldBegin('from_uid', TType::I32, 1);
      $xfer += $output->writeI32($this->from_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_type !== null) {
      $xfer += $output->writeFieldBegin('action_type', TType::I32, 2);
      $xfer += $output->writeI32($this->action_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to_uid !== null) {
      if (!is_array($this->to_uid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('to_uid', TType::LST, 3);
      {
        $output->writeListBegin(TType::I32, count($this->to_uid));
        {
          foreach ($this->to_uid as $iter13)
          {
            $xfer += $output->writeI32($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content_id !== null) {
      $xfer += $output->writeFieldBegin('content_id', TType::I64, 4);
      $xfer += $output->writeI64($this->content_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MisPushRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $title = "";
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $tid = 0;
  /**
   * @var string
   */
  public $url = "";
  /**
   * @var int
   */
  public $send_time = 0;
  /**
   * @var int
   */
  public $push_task_id = 0;
  /**
   * @var int
   */
  public $device_type = 0;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var string
   */
  public $school = null;
  /**
   * @var string
   */
  public $ukind_verify = null;
  /**
   * @var int
   */
  public $is_broadcast = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'tid',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'send_time',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'push_task_id',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'device_type',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'school',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'ukind_verify',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'is_broadcast',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['send_time'])) {
        $this->send_time = $vals['send_time'];
      }
      if (isset($vals['push_task_id'])) {
        $this->push_task_id = $vals['push_task_id'];
      }
      if (isset($vals['device_type'])) {
        $this->device_type = $vals['device_type'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['school'])) {
        $this->school = $vals['school'];
      }
      if (isset($vals['ukind_verify'])) {
        $this->ukind_verify = $vals['ukind_verify'];
      }
      if (isset($vals['is_broadcast'])) {
        $this->is_broadcast = $vals['is_broadcast'];
      }
    }
  }

  public function getName() {
    return 'MisPushRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->send_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->push_task_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->device_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->school);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ukind_verify);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_broadcast);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MisPushRequest');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::I64, 5);
      $xfer += $output->writeI64($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 6);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->send_time !== null) {
      $xfer += $output->writeFieldBegin('send_time', TType::I32, 7);
      $xfer += $output->writeI32($this->send_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->push_task_id !== null) {
      $xfer += $output->writeFieldBegin('push_task_id', TType::I32, 8);
      $xfer += $output->writeI32($this->push_task_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device_type !== null) {
      $xfer += $output->writeFieldBegin('device_type', TType::I32, 9);
      $xfer += $output->writeI32($this->device_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 10);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->school !== null) {
      $xfer += $output->writeFieldBegin('school', TType::STRING, 11);
      $xfer += $output->writeString($this->school);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ukind_verify !== null) {
      $xfer += $output->writeFieldBegin('ukind_verify', TType::STRING, 12);
      $xfer += $output->writeString($this->ukind_verify);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_broadcast !== null) {
      $xfer += $output->writeFieldBegin('is_broadcast', TType::I32, 13);
      $xfer += $output->writeI32($this->is_broadcast);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SetPushTagRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = 0;
  /**
   * @var string
   */
  public $xg_device_token = "";
  /**
   * @var int
   */
  public $op = null;
  /**
   * @var string[]
   */
  public $tag_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'xg_device_token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'op',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'tag_list',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['xg_device_token'])) {
        $this->xg_device_token = $vals['xg_device_token'];
      }
      if (isset($vals['op'])) {
        $this->op = $vals['op'];
      }
      if (isset($vals['tag_list'])) {
        $this->tag_list = $vals['tag_list'];
      }
    }
  }

  public function getName() {
    return 'SetPushTagRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->xg_device_token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->op);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->tag_list = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $xfer += $input->readString($elem19);
              $this->tag_list []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SetPushTagRequest');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->xg_device_token !== null) {
      $xfer += $output->writeFieldBegin('xg_device_token', TType::STRING, 2);
      $xfer += $output->writeString($this->xg_device_token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->op !== null) {
      $xfer += $output->writeFieldBegin('op', TType::I32, 3);
      $xfer += $output->writeI32($this->op);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag_list !== null) {
      if (!is_array($this->tag_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tag_list', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->tag_list));
        {
          foreach ($this->tag_list as $iter20)
          {
            $xfer += $output->writeString($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ClearRedRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $mType = null;
  /**
   * @var int
   */
  public $from_uid = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'from_uid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['mType'])) {
        $this->mType = $vals['mType'];
      }
      if (isset($vals['from_uid'])) {
        $this->from_uid = $vals['from_uid'];
      }
    }
  }

  public function getName() {
    return 'ClearRedRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->from_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ClearRedRequest');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mType !== null) {
      $xfer += $output->writeFieldBegin('mType', TType::I32, 2);
      $xfer += $output->writeI32($this->mType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_uid !== null) {
      $xfer += $output->writeFieldBegin('from_uid', TType::I32, 3);
      $xfer += $output->writeI32($this->from_uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SetMsgReadRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msg_id'])) {
        $this->msg_id = $vals['msg_id'];
      }
    }
  }

  public function getName() {
    return 'SetMsgReadRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msg_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SetMsgReadRequest');
    if ($this->msg_id !== null) {
      $xfer += $output->writeFieldBegin('msg_id', TType::I32, 1);
      $xfer += $output->writeI32($this->msg_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SetMsgDelRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msg_id'])) {
        $this->msg_id = $vals['msg_id'];
      }
    }
  }

  public function getName() {
    return 'SetMsgDelRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msg_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SetMsgDelRequest');
    if ($this->msg_id !== null) {
      $xfer += $output->writeFieldBegin('msg_id', TType::I32, 1);
      $xfer += $output->writeI32($this->msg_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


